/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotificationsImport } from './routes/notifications'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const LoginLazyImport = createFileRoute('/login')()
const IndexLazyImport = createFileRoute('/')()
const TagTagLazyImport = createFileRoute('/tag/$tag')()
const ProfileHandleLazyImport = createFileRoute('/profile/$handle')()
const ProfileHandlePostPostIdLazyImport = createFileRoute(
  '/profile_/$handle/post/$postId',
)()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const NotificationsRoute = NotificationsImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TagTagLazyRoute = TagTagLazyImport.update({
  id: '/tag/$tag',
  path: '/tag/$tag',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tag.$tag.lazy').then((d) => d.Route))

const ProfileHandleLazyRoute = ProfileHandleLazyImport.update({
  id: '/profile/$handle',
  path: '/profile/$handle',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile.$handle.lazy').then((d) => d.Route),
)

const ProfileHandlePostPostIdLazyRoute =
  ProfileHandlePostPostIdLazyImport.update({
    id: '/profile_/$handle/post/$postId',
    path: '/profile/$handle/post/$postId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/profile_.$handle.post.$postId.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/$handle': {
      id: '/profile/$handle'
      path: '/profile/$handle'
      fullPath: '/profile/$handle'
      preLoaderRoute: typeof ProfileHandleLazyImport
      parentRoute: typeof rootRoute
    }
    '/tag/$tag': {
      id: '/tag/$tag'
      path: '/tag/$tag'
      fullPath: '/tag/$tag'
      preLoaderRoute: typeof TagTagLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile_/$handle/post/$postId': {
      id: '/profile_/$handle/post/$postId'
      path: '/profile/$handle/post/$postId'
      fullPath: '/profile/$handle/post/$postId'
      preLoaderRoute: typeof ProfileHandlePostPostIdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/notifications': typeof NotificationsRoute
  '/login': typeof LoginLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/profile/$handle': typeof ProfileHandleLazyRoute
  '/tag/$tag': typeof TagTagLazyRoute
  '/profile/$handle/post/$postId': typeof ProfileHandlePostPostIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/notifications': typeof NotificationsRoute
  '/login': typeof LoginLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/profile/$handle': typeof ProfileHandleLazyRoute
  '/tag/$tag': typeof TagTagLazyRoute
  '/profile/$handle/post/$postId': typeof ProfileHandlePostPostIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/notifications': typeof NotificationsRoute
  '/login': typeof LoginLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/profile/$handle': typeof ProfileHandleLazyRoute
  '/tag/$tag': typeof TagTagLazyRoute
  '/profile_/$handle/post/$postId': typeof ProfileHandlePostPostIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/notifications'
    | '/login'
    | '/settings'
    | '/profile/$handle'
    | '/tag/$tag'
    | '/profile/$handle/post/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/notifications'
    | '/login'
    | '/settings'
    | '/profile/$handle'
    | '/tag/$tag'
    | '/profile/$handle/post/$postId'
  id:
    | '__root__'
    | '/'
    | '/notifications'
    | '/login'
    | '/settings'
    | '/profile/$handle'
    | '/tag/$tag'
    | '/profile_/$handle/post/$postId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  NotificationsRoute: typeof NotificationsRoute
  LoginLazyRoute: typeof LoginLazyRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  ProfileHandleLazyRoute: typeof ProfileHandleLazyRoute
  TagTagLazyRoute: typeof TagTagLazyRoute
  ProfileHandlePostPostIdLazyRoute: typeof ProfileHandlePostPostIdLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  NotificationsRoute: NotificationsRoute,
  LoginLazyRoute: LoginLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  ProfileHandleLazyRoute: ProfileHandleLazyRoute,
  TagTagLazyRoute: TagTagLazyRoute,
  ProfileHandlePostPostIdLazyRoute: ProfileHandlePostPostIdLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/notifications",
        "/login",
        "/settings",
        "/profile/$handle",
        "/tag/$tag",
        "/profile_/$handle/post/$postId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/notifications": {
      "filePath": "notifications.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/profile/$handle": {
      "filePath": "profile.$handle.lazy.tsx"
    },
    "/tag/$tag": {
      "filePath": "tag.$tag.lazy.tsx"
    },
    "/profile_/$handle/post/$postId": {
      "filePath": "profile_.$handle.post.$postId.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
